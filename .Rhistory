library(tidyverse)
set.seed(55)
n <- 400
x <- seq(1, 10, length.out = n)
y <- 1.2 + 2.1*x + rnorm(n, sd = 2*exp(0.5*x))
d <- data.frame(y, x)
ggplot(d, aes(x, y)) + geom_point()
vm4 <- gls(y ~ x, data = d, weights = varExp(form = ~x))
library(nlme)
vm4 <- gls(y ~ x, data = d, weights = varExp(form = ~x))
summary(vm4)
set.seed(4)
n <- 1000
x <- seq(1,10,length.out = n)
y <- 1.2 + 2.1*x + rnorm(n, sd = 2*abs(x)^1.5)
d <- data.frame(y, x)
ggplot(d, aes(x, y)) + geom_point()
vm4 <- gls(y ~ x, data = d, weights = varPower(form = ~x))
summary(vm4)
predict(vm4, data.frame(x = 1))
predict(vm4, data.frame(x = 1), interval = "confidence")
?predict
predict(vm4, newdata = data.frame(x = 1), interval = "confidence")
predict.gls(vm4, newdata = data.frame(x = 1), interval = "confidence")
nlme::predict.gls(vm4, newdata = data.frame(x = 1), interval = "confidence")
nlme::predict(vm4, newdata = data.frame(x = 1), interval = "confidence")
nlme::predict(vm4, newdata = data.frame(x = c(1:10)))
predict(vm4, newdata = data.frame(x = c(1:10)))
model <- lm(y ~ x)
summary(vm4)
summary(model)
predict(vm4, newdata = data.frame(x = c(1:10)))
predict(model, newdata = data.frame(x = c(1:10)))
rm(list = ls())
rm(list = ls())
options(scipen = 99)
library(tidyverse)
training <- read_csv("../../1_Data Cleaning/1_data/training_set.csv")
myvars <- c("price", "area", "parking", "bedrooms", "bathrooms", "price_per_m2",
"area_per_br")
pairs(training[myvars])
pairs(training[myvars])
ggplot(training, aes(y = price, x = area, colour = as.factor(bedrooms))) + geom_point()
ggplot(training, aes(y = price, x = area, colour = as.factor(status))) + geom_point()
ggplot(training, aes(y = price, x = price_per_m2, colour = as.factor(berdooms))) + geom_point()
ggplot(training, aes(y = price, x = price_per_m2, colour = as.factor(bedrooms))) + geom_point()
ggplot(training, aes(y = price, x = area, colour = as.factor(bedrooms))) + geom_point()
training$bedrooms <- as.factor(raining$bedrooms)
training$bedrooms <- as.factor(training$bedrooms)
vm2 <- gls(price ~ area * bedrooms, data = training, weights = varIdent(form = ~ 1|bedrooms))
lm(price ~ area * bedrooms, data = training)
training <- training %>% filter(bedrooms != 6)
lm(price ~ area * bedrooms, data = training)
vm2 <- gls(price ~ area * bedrooms, data = training, weights = varIdent(form = ~ 1|bedrooms))
summary()gls
summary(vm2)
residuals(vm2)
shapiro.test(residuals(vm2))
shapiro.test(rstandard(vm2))
plot(vm2)
training <- training %>%
mutate(logPrice = log(price), logArea = log(area))
ggplot(training, aes(y = price, x = area, colour = as.factor(bedrooms))) + geom_point()
ggplot(training, aes(y = logPrice, x = area, colour = as.factor(bedrooms))) + geom_point()
ggplot(training, aes(y = logPrice, x = logArea, colour = as.factor(bedrooms))) + geom_point()
vm2 <- gls(logPrice ~ logArea * bedrooms, data = training, weights = varIdent(form = ~ 1|bedrooms))
summary(vm2)
plot(vm2)
residuals(vm2)
min(resid(vm2))
min(residuals(vm2))
rstandard(vm2)
predict(vm2, newdata = data.frame(logArea = log(62), bedrooms = as.factor(1)))
exp(11.83655)
predict(vm2, newdata = data.frame(logArea = log(157), bedrooms = as.factor(3)))
exp(12.22041)
exp(predict(vm2, newdata = data.frame(logArea = log(132), bedrooms = as.factor(2))))
ggplot(training, aes(y = logPrice, x = logArea, colour = as.factor(bedrooms))) + geom_point()
ggplot(training, aes(y = logPrice, x = logArea, colour = as.factor(status))) + geom_point()
vm2 <- gls(logPrice ~ logArea * bedrooms, data = training, weights = varIdent(form = ~ logPrice|bedrooms))
summary(vm2)
vm2 <- gls(logPrice ~ logArea * bedrooms, data = training, weights = varIdent(form = ~ 1|bedrooms))
summary(vm2)
ggplot(training, aes(y = logPrice, x = logArea, colour = as.factor(status))) + geom_point()
vm2 <- gls(logPrice ~ logArea * bedrooms + status, data = training, weights = varIdent(form = ~ 1|bedrooms))
summary(vm2)
plot(vm2)
?rstandard
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point() + facet_grid(vars(bedrooms))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point() + facet_grid(cols 0 vars(bedrooms))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point() + facet_grid(cols 0 vars(bedrooms))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point() + facet_grid(cols = vars(bedrooms))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point() + facet_grid(vars(status), vars(bedrooms))
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point()
library(tidyverse)
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point()
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point() + facet_grid(vars(bedrooms))
lm(logPrice ~ logArea, data = training)
lm(logPrice ~ logArea, data = training) %>% summary()
fit <- lm(logPrice ~ logArea, data = training)
plot(fit)
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point() + facet_grid(vars(status))
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point() + facet_grid(cols 0 vars(status))
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice)) + geom_point() + facet_grid(cols = vars(status))
filter(training, bedrooms == 3) %>% ggplot(aes(logArea, logPrice, colour = status)) + geom_point()
fit <- lm(logPrice ~ logArea * bedrooms, data = training)
summary(fit)
trn <- filter(training, bedrooms == 3)
fit <- lm(logPrice ~ logArea * bedrooms, data = trn)
fit <- lm(logPrice ~ logArea, data = trn)
plot(fit)
fit <- lm(logPrice ~ logArea * status, data = trn)
plot(fit)
shapiro.test(resid(fit))
gvlma::gvlma(fit)
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_point()
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_point() + facet_grid(vars(status))
trn <- filter(trn, status %in% c("New", "Building", "Used"))
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_point() + facet_grid(vars(status))
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_point() + facet_grid(cols 0 vars(status))
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_point() + facet_grid(cols = vars(status))
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_boxplot() + facet_grid(cols = vars(status))
t.test(trn$price ~ trn$status)
chisq.test(trn$price ~ trn$status)
fit <- lm(logPrice ~ logArea * parking, data = trn)
summary>(fit)
summary(fit)
ggplot(trn, aes(logArea, logPrice, colour = status)) + geom_boxplot() + facet_grid(cols = vars(parking))
ggplot(trn, aes(logArea, logPrice, colour = parking)) + geom_boxplot() + facet_grid(cols = vars(parking))
ggplot(trn, aes(logArea, logPrice, colour = parking)) + geom_boxplot() + facet_grid(cols = vars(as.factor(parking)))
ggplot(trn, aes(logArea, logPrice, colour = as.factor(parking))) + geom_boxplot() + facet_grid(cols = vars(as.factor(parking)))
trn <- filter(trn, parking <= 5)
fit <- lm(logPrice ~ logArea * parking, data = trn)
plot(fit)
gvlma::gvlma(fit)
fit <- lm(logPrice ~ Area * parking, data = trn)
fit <- lm(logPrice ~ area * parking, data = trn)
library(gvlma)
gvlma(fit)
fit <- lm(logPrice ~ area, data = trn)
gvlma(fit)
ggplot(trn, aes(price ~ area)) + geom_point()
ggplot(trn, aes(y = price, x = area)) + geom_point()
ggplot(trn, aes(y = logPrice, x = logArea)) + geom_point()
fit(logPrice ~ logArea * parking, data = trn)
lm(logPrice ~ logArea * parking, data = trn)
fit <- lm(logPrice ~ logArea * parking, data = trn)
summary(fit)
plot(fit)
shapiro.test(resid(fit))
options(scipen = 999)
shapiro.test(resid(fit))
fit <- lm(logPrice ~ area * parking, data = trn)
shapiro.test(resid(fit))
training <- read_csv("../../1_Data Cleaning/1_data/training_set.csv")
library(tidyverse)
training <- read_csv("../../1_Data Cleaning/1_data/training_set.csv") %>%
filter(location %in% c("Bella Vista", "Bella Vista Norte", "Bella Vista Sur")) %>%
mutate(logPrice = log(price),
logArea = log(area),
location = case_when(location == "Bella Vista Norte" ~ "Bella Vista",
location == "Bella Vista Sur" ~ "Bella Vista",
TRUE ~ location)) %>%
na.omit()
unique(training$location)
model <- lm(logPrice ~ area + I(log(area_per_br)) + as.factor(status) + I(parking / bedrooms), data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area + area_per_br + as.factor(status) + I(parking / bedrooms) + I(bedrooms / bathrooms), data = training)
shapiro.test(residuals(model))
summary(model)
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area * bedrooms + as.factor(status) + I(parking / bedrooms) + I(bedrooms / bathrooms),
data = training)
shapiro.test(residuals(model))
gvlma::gvlma(model)
model <- lm(logPrice ~ area * bedrooms + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area * bedrooms + as.factor(status) + I(parking / bedrooms),
data = training)
shapiro.test(residuals(model))
shapiro.test(residuals(model))
gvlma::gvlma(model)
model <- lm(logPrice ~ logArea * bedrooms + as.factor(status) + I(parking / bedrooms),
data = training)
shapiro.test(residuals(model))
summary(model)
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms)) + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
training <- read_csv("../../1_Data Cleaning/1_data/training_set.csv") %>%
filter(location %in% c("Bella Vista", "Bella Vista Norte", "Bella Vista Sur", "Piantini")) %>%
mutate(logPrice = log(price),
logArea = log(area),
location = case_when(location == "Bella Vista Norte" ~ "Bella Vista",
location == "Bella Vista Sur" ~ "Bella Vista",
TRUE ~ location)) %>%
na.omit()
training <- read_csv("../../1_Data Cleaning/1_data/training_set.csv") %>%
filter(location %in% c("Bella Vista", "Bella Vista Norte", "Bella Vista Sur", "Piantini")) %>%
mutate(logPrice = log(price),
logArea = log(area),
location = case_when(location == "Bella Vista Norte" ~ "Bella Vista",
location == "Bella Vista Sur" ~ "Bella Vista",
TRUE ~ location)) %>%
na.omit()
unique(training$location)
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
summary(model)
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area + I(log(area_per_br)) + as.factor(status) + I(parking / bedrooms), data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area + I(log(area_per_br)) + as.factor(status) + I(parking / bedrooms) + location, data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + as.factor(status) + location,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ logArea  + I(area / (bedrooms + bathrooms + parking)) + as.factor(status) + location,
data = training)
shapiro.test(residuals(model))
gvlma::gvlma(model)
ggplot(training, aes(y = area, x = location)) + geom_boxplot()
model <- lm(logPrice ~ area * location  + I(area / (bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area * location * bedrooms + I(area / (bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
model <- lm(logPrice ~ area * location * I((bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ area * location  + area * I((bedrooms + bathrooms + parking)) + as.factor(status),
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
ggplot(training, aes(y = price, colour = as.factor(lift))) + geom_boxplot()
t.test(price ~ as.factor(lift()))
t.test(price ~ as.factor(lift))
t.test(training$price ~ as.factor(training$lift))
t.test(training$price ~ as.factor(training$planta))
t.test(training$price ~ as.factor(training$gimnasio))
t.test(training$price ~ as.factor(training$pool))
t.test(training$price ~ as.factor(training$lobby))
