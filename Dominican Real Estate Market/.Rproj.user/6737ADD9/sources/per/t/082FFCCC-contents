---
title: "modelling"
output: html_document
date: "2022-08-09"
---

```{r}
rm(list = ls())

library(nlme)
library(tidyverse)
library(ggResidpanel)

training <- read_csv("../../2_Exploratory Data Analysis/1_data/testing_set.csv") %>%
  filter(location %in% c("Bella Vista", "Bella Vista Norte",
                         "Bella Vista Sur")) %>%
  mutate(status = case_when(status == "En Planos" ~ "In blueprint",
                            status == "En Construcción" ~ "Building",
                            status == "Nueva" ~ "New",
                            status == "Remodelada" ~ "Rebuilt",
                            status == "A Remodelar" ~ "Rebuilding",
                            status == "Segundo Uso" ~ "Used",
                            status == "Fideicomiso" ~ "In blueprint",
                            TRUE ~ status),
         status = factor(status, levels = c("In blueprint", "Building", "New",
                                            "Rebuilding", "Rebuilt", "Used")),
         location = case_when(location == "Bella Vista Norte" ~ "Bella Vista",
                              location == "Bella Vista Sur" ~ "Bella Vista",
                              TRUE ~ location)) %>%
  na.omit()

testing <- read_csv("../../2_Exploratory Data Analysis/1_data/testing_set.csv") %>%
  filter(location %in% c("Bella Vista", "Bella Vista Norte",
                         "Bella Vista Sur")) %>%
  mutate(status = case_when(status == "En Planos" ~ "In blueprint",
                            status == "En Construcción" ~ "Building",
                            status == "Nueva" ~ "New",
                            status == "Remodelada" ~ "Rebuilt",
                            status == "A Remodelar" ~ "Rebuilding",
                            status == "Segundo Uso" ~ "Used",
                            status == "Fideicomiso" ~ "In blueprint",
                            TRUE ~ status),
         status = factor(status, levels = c("In blueprint", "Building", "New",
                                            "Rebuilding", "Rebuilt", "Used")),
         location = case_when(location == "Bella Vista Norte" ~ "Bella Vista",
                              location == "Bella Vista Sur" ~ "Bella Vista",
                              TRUE ~ location)) %>%
  na.omit()

unique(training$location)
training <- training %>%
  mutate(logPrice = log(price),
         logArea = log(area)) %>%
  na.omit()
model <- gls(price ~ area, data = training, weights = varFixed(~ area))
plot(model)
model <- lm(logPrice ~ logArea,
            data = training)
plot(model)
model <- lm(logrice ~ area * bedrooms + area_per_br,
            data = training)

shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
```

## Regression diagnostics

So, let's do some diagnostic using plots:

```{r}
par(mfrow = c(2, 2))
plot(model)
```

There are three remarkable observations: 56, 95, and 118.

1.  Observation 118 has a fitted value of 963,583.90 versus its actual value of 595,00.00. When visually inspecting the apartment, it becomes apparent why it is so: it is old in comparison with the market.

2.  Observation 95 was already deleted from supercasas.com website, rising concerns on it validity.

3.  Observation 56 is

```{r}
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")

training <- training[cooks.distance(model) < cutoff, ]
training <- training[-c(95, 118, 116), ]
```

```{r}
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + status,
            data = training)

shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)

cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")

training <- training[-c(6, 13, 56, 59, 62, 115), ]
```

```{r}
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + status,
            data = training)

shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)

cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")

training <- training[-c(47, 84, 92), ]
```

```{r}
model <- lm(logPrice ~ area  + I(area / (bedrooms + bathrooms + parking)) + status + lift,
            data = training)

model <- lm(logPrice ~ logArea,
            data = training)
model1 <- lm(logPrice ~ logArea + I(logArea^2),
            data = training)
model2 <- lm(logPrice ~ logArea + I(logArea^2) + parking,
            data = training)
model3 <- lm(logPrice ~ logArea + parking + status,
            data = training)
model4 <- lm(logPrice ~ logArea + parking + status + pool,
            data = training)
model5 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio,
            data = training)
model6 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio + area_per_br,
            data = training)

anova(model, model1, model2, model3, model4, model5)

summary(model)
model <- model5
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)

shapiro.test(residuals(model2))
summary(model2)
gvlma::gvlma(model6)


cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")

```

### Normality

Upon testing the residuals for normality, we got that they are normal.

```{r}
shapiro.test(residuals(model))
```

### Independence

Residuals don't show signs of autocorrelation.

```{r}
library(car)
durbinWatsonTest(model)
```

### Linearity

hgsrthrew

```{r}
vif(model)
```

### Homoscedasticity

```{r}
bptest(model)
```

## Model evaluation

## Limitations and ways to improve

-   As apartments are not all listed at the same time, at any given moment, supercasas.com shows newly listed apartments along with not so newly listed one. Given that supercasas.com does not provide information regarding when each listing was published, I couldn't model price a time series. This violates the OLS' assumption of independence. Hence, this model is not suitable for predictions and should be limited for inferential analysis.

-    Nevertheless, a way to solve the previous observation is to programmatically retrieve apartments' price and it characteristics, assigning a date to the newly added listings. This way, it is possible when any listing (up to a date) was published and when was unpublished (this could be a proxy for when it was sold).

-   This model does not include information on location or neighborhood. Limiting the analysis on one location: Bella Vista. I need to find a way to group location on similar characteristics (be it income level , proximity or socioeconomic status).

-   `status` does not discriminates between recently used apartment and those that has been around for a long time. Hence, predictions on them won't be as accurate as in other categories.
