data = training)
model4 <- lm(logPrice ~ logArea + parking + status + pool + pozo,
data = training)
model <- lm(logPrice ~ logArea,
data = training)
model2 <- lm(logPrice ~ logArea + parking,
data = training)
model3 <- lm(logPrice ~ logArea + parking + status,
data = training)
model4 <- lm(logPrice ~ logArea + parking + status + pool,
data = training)
model5 <- lm(logPrice ~ logArea + parking + status + pool + pozo,
data = training)
anova(model, model2, model3, model4, model 5)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + terraza,
data = training)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + lobby,
data = training)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + balcon,
data = training)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + jacuzzi,
data = training)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio,
data = training)
anova(model, model2, model3, model4, model5)
model5 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio + area_per_br,
data = training)
model5 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio,
data = training)
model6 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio + area_per_br,
data = training)
anova(model, model2, model3, model4, model5)
anova(model, model2, model3, model4, model5, model6)
summary(model5)
model <- model5
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
shapiro.test(residuals(model))
vif(model)
bptest(model)
durbinWatsonTest(model)
model2 <- lm(logPrice ~ logArea + I(logArea^2) + parking,
data = training)
anova(model, model2, model3, model4, model5)
model <- lm(logPrice ~ logArea,
data = training)
model1 <- lm(logPrice ~ logArea + I(logArea^2),
data = training)
model2 <- lm(logPrice ~ logArea + I(logArea^2) + parking,
data = training)
model3 <- lm(logPrice ~ logArea + parking + status,
data = training)
model4 <- lm(logPrice ~ logArea + parking + status + pool,
data = training)
model5 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio,
data = training)
model6 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio + area_per_br,
data = training)
anova(model, model1, model2, model3, model4, model5)
plot(model6)
training <- training[-c(74), ]
model6 <- lm(logPrice ~ logArea + parking + status + pool + gimnasio + area_per_br,
data = training)
plot(model6)
shapiro.test(model6)
model6
shapiro.test(resid(model6))
bptest(model6)
durbinWatsonTest(model)
vif(model)
durbinWatsonTest(model6)
durbinWatsonTest(model6)
vif(model6)
bptest(model6)
gvlma::gvlma(model6)
model <- lm(logPrice ~ logArea,
data = training)
summary(model5)
summary(model)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
durbinWatsonTest(model6)
vif(model6)
vif(model)
durbinWatsonTest(model)
bptest(model6)
bptest(model)
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
training <- read_csv("../../2_Exploratory Data Analysis/1_data/testing_set.csv")
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
training$logArea <- log(training$area)
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
model <- lm(logPrice ~ logArea  + I(area / (bedrooms + bathrooms + parking)) + status,
data = training)
shapiro.test(residuals(model))
model <- lm(logPrice ~ logArea  + I(area / (bedrooms + bathrooms + parking)) + status,
data = training)
par(mfrow = c(2, 2))
plot(model)
View(training)
exp(fitted(model)[447])
exp(fitted(model)[1215])
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
cooks.distance(model)
cooks.distance(model)>2
cooks.distance(model)[cooks.distance(model) > cutoff]
training[cooks.distance(model) < cutoff, ]
length(cooks.distance(model))
training <- read_csv("../../2_Exploratory Data Analysis/1_data/testing_set.csv")
unique(training$location)
model <- lm(logPrice ~ logArea  + I(area / (bedrooms + bathrooms + parking)) + status,
data = training)
training$logArea <- log(training$area)
model <- lm(logPrice ~ logArea  + I(area / (bedrooms + bathrooms + parking)) + status,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
par(mfrow = c(2, 2))
plot(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
cooks.distance(model)
length(cooks.distance(model))
training[cooks.distance(model) < cutoff, ]
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
par(mfrow = c(2, 2))
plot(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
par(mfrow = c(2, 2))
plot(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
par(mfrow = c(2, 2))
plot(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
fitted(model)
model <- lm(logPrice ~ area,
data = training)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
model <- lm(logPrice ~ I(area / (bedrooms + bathrooms + parking)),
data = training)
shapiro.test(residuals(model))
summary(model)
model <- lm(logPrice ~ area,
data = training)
shapiro.test(residuals(model))
summary(model)
model <- lm(price ~ area,
data = training)
shapiro.test(residuals(model))
model <- lm(price ~ area_per_br,
data = training)
shapiro.test(residuals(model))
summary(model)
model <- lm(price ~ area + bedrooms + area_per_br,
data = training)
shapiro.test(residuals(model))
summary(model)
model <- lm(price ~ area * bedrooms + area_per_br,
data = training)
shapiro.test(residuals(model))
summary(model)
library(nlme)
model <- gls(price ~ area, weights = varFixed(~area))
model <- gls(price ~ area, data = training, weights = varFixed(~area))
plot(model)
model <- gls(price ~ area, data = training, weights = varExp(~area))
model <- gls(price ~ area, data = training, weights = varExp(form = ~ area))
plot(model)
model <- lm(logrice ~ area * bedrooms + area_per_br,
data = training)
plot(model)
model <- gls(logPrice ~ logArea, data = training, weights = varExp(form = ~ area))
plot(model)
model <- gls(logPrice ~ logArea, data = training, weights = varPower(form = ~ area))
model <- gls(logPrice ~ logArea, data = training, weights = varPower(form = ~ logArea))
plot(model)
model <- gls(logPrice ~ logArea, data = training, weights = varFixed(form = ~ logArea))
model <- gls(logPrice ~ logArea, data = training, weights = varFixed(~ logArea))
plot(model)
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
model <- lm(logrice ~ area * bedrooms + area_per_br,
data = training)
ggplot(training, aes(y = price, x = area)) + geom_point()
rm(list = ls())
options(scipen = 999)
library(robustbase)
library(tidyverse)
library(caret)
set.seed(1234)
path <- "../../0_Data Collection/1_data/0_raw/housing price/"
housing_files <- list.files(path)
housing <- read_csv(paste0(path, housing_files))
housing <- housing %>%
filter(date ==  "2022-08-02",
usage == "Residencial",
province %in% c("Santo Domingo", "Santo Domingo Centro (D.N.)")) %>%
rename(location = neighborhood) %>%
select(-c(date, usage, city, province))
inTrain <- createDataPartition(housing$price.usd, p = 0.7, list = FALSE)
training <- housing[inTrain, ]
testing <- housing[-inTrain, ]
dim(housing)
dim(training)
dim(testing)
glimpse(training)
training <- training %>%
select(-c(currency, price)) %>%
rename(price = price.usd)
testing <- testing %>%
select(-c(currency, price)) %>%
rename(price = price.usd)
apply(training, 2,
\(x) {
n <- length(x)
na <- x %>%
is.na() %>%
sum()
prop.na <- na / n * 100
})
training <- training %>%
select(-c(story))
testing <- testing %>%
select(-c(story))
summary(training)
training %>%
arrange(desc(area)) %>%
head(10)
training <- training %>%
mutate(area = ifelse(area > 10000, area / 1000, area)) %>%
unique()
testing <- testing %>%
mutate(area = ifelse(area > 10000, area / 1000, area)) %>%
unique()
summary(training$price)
ggplot(training, aes(price)) +
geom_histogram()
summary(training$area)
ggplot(training, aes(area)) +
geom_histogram()
training <- training %>%
mutate(price_per_m2 = price / area,
area_per_br = area / bedrooms)
testing <- testing %>%
mutate(price_per_m2 = price / area,
area_per_br = area / bedrooms)
summary(training$price_per_m2)
summary(training$area_per_br)
ggplot(training, aes(price_per_m2)) +
geom_histogram()
training %>%
filter(price_per_m2 < 2027) %>%
ggplot(aes(price_per_m2)) +
geom_histogram()
summary(training$status)
training <- training %>%
mutate(status = case_when(status == "En Planos" ~ "In blueprint",
status == "En Construcción" ~ "Building",
status == "Nueva" ~ "New",
status == "Remodelada" ~ "Rebuilt",
status == "A Remodelar" ~ "Rebuilding",
status == "Segundo Uso" ~ "Used",
status == "Fideicomiso" ~ "In blueprint",
TRUE ~ status),
status = factor(status, levels = c("In blueprint", "Building", "New",
"Rebuilding", "Rebuilt", "Used")))
testing <- testing %>%
mutate(status = case_when(status == "En Planos" ~ "In blueprint",
status == "En Construcción" ~ "Building",
status == "Nueva" ~ "New",
status == "Remodelada" ~ "Rebuilt",
status == "A Remodelar" ~ "Rebuilding",
status == "Segundo Uso" ~ "Used",
status == "Fideicomiso" ~ "In blueprint",
TRUE ~ status),
status = factor(status, levels = c("In blueprint", "Building", "New",
"Rebuilding", "Rebuilt", "Used")))
summary(training$status)
training <- training %>%
mutate(logPrice = log(price),
logArea = log(area))
model <- gls(logPrice ~ logArea, data = training, weights = varFixed(~ logArea))
training <- training %>%
mutate(logPrice = log(price),
logArea = log(area)) %>%
na.omit()
model <- gls(logPrice ~ logArea, data = training, weights = varFixed(~ logArea))
plot(model)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
plot(model)
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
summary(model)
summary(lm(logPrice ~ logArea, data = training))
training <- training %>%
filter(!between(logPrice, 10, 15))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
rm(list = ls())
options(scipen = 999)
library(robustbase)
library(tidyverse)
library(caret)
set.seed(1234)
path <- "../../0_Data Collection/1_data/0_raw/housing price/"
housing_files <- list.files(path)
housing <- read_csv(paste0(path, housing_files))
housing <- housing %>%
filter(date ==  "2022-08-02",
usage == "Residencial",
province %in% c("Santo Domingo", "Santo Domingo Centro (D.N.)")) %>%
rename(location = neighborhood) %>%
select(-c(date, usage, city, province))
inTrain <- createDataPartition(housing$price.usd, p = 0.7, list = FALSE)
training <- housing[inTrain, ]
testing <- housing[-inTrain, ]
dim(housing)
dim(training)
dim(testing)
glimpse(training)
training <- training %>%
select(-c(currency, price)) %>%
rename(price = price.usd)
testing <- testing %>%
select(-c(currency, price)) %>%
rename(price = price.usd)
apply(training, 2,
\(x) {
n <- length(x)
na <- x %>%
is.na() %>%
sum()
prop.na <- na / n * 100
})
training <- training %>%
select(-c(story))
testing <- testing %>%
select(-c(story))
summary(training)
training %>%
arrange(desc(area)) %>%
head(10)
training <- training %>%
mutate(area = ifelse(area > 10000, area / 1000, area)) %>%
unique()
testing <- testing %>%
mutate(area = ifelse(area > 10000, area / 1000, area)) %>%
unique()
summary(training$price)
ggplot(training, aes(price)) +
geom_histogram()
summary(training$area)
ggplot(training, aes(area)) +
geom_histogram()
training <- training %>%
mutate(price_per_m2 = price / area,
area_per_br = area / bedrooms)
testing <- testing %>%
mutate(price_per_m2 = price / area,
area_per_br = area / bedrooms)
summary(training$price_per_m2)
summary(training$area_per_br)
ggplot(training, aes(price_per_m2)) +
geom_histogram()
training %>%
filter(price_per_m2 < 2027) %>%
ggplot(aes(price_per_m2)) +
geom_histogram()
summary(training$status)
training <- training %>%
mutate(status = case_when(status == "En Planos" ~ "In blueprint",
status == "En Construcción" ~ "Building",
status == "Nueva" ~ "New",
status == "Remodelada" ~ "Rebuilt",
status == "A Remodelar" ~ "Rebuilding",
status == "Segundo Uso" ~ "Used",
status == "Fideicomiso" ~ "In blueprint",
TRUE ~ status),
status = factor(status, levels = c("In blueprint", "Building", "New",
"Rebuilding", "Rebuilt", "Used")))
testing <- testing %>%
mutate(status = case_when(status == "En Planos" ~ "In blueprint",
status == "En Construcción" ~ "Building",
status == "Nueva" ~ "New",
status == "Remodelada" ~ "Rebuilt",
status == "A Remodelar" ~ "Rebuilding",
status == "Segundo Uso" ~ "Used",
status == "Fideicomiso" ~ "In blueprint",
TRUE ~ status),
status = factor(status, levels = c("In blueprint", "Building", "New",
"Rebuilding", "Rebuilt", "Used")))
summary(training$status)
training <- training %>%
mutate(logPrice = log(price),
logArea = log(area)) %>%
na.omit()
model <- gls(logPrice ~ logArea, data = training, weights = varFixed(~ logArea))
plot(model)
training2 <- training %>%
filter(between, 10 , 15)
training <- training %>%
filter(between(logPrice, 10, 15))
ggplot(training, aes(y = logPrice, x = logArea)) + geom_point()
model <- lm(logPrice ~ logArea,
data = training)
plot(model)
shapiro.test(residuals(model))
summary(model)
gvlma::gvlma(model)
cutoff <- 4 / (nrow(training) - length(model$coefficients) - 2)
plot(model, which = 4, cook.levels = cutoff)
abline(h = cutoff, lty = 2, col = "red")
training <- training[cooks.distance(model) < cutoff, ]
model <- lm(logPrice ~ logArea,
data = training)
plot(model)
model <- gls(logPrice ~ logArea, data = training, weights = varPower(~ logArea))
model <- gls(logPrice ~ logArea, data = training, weights = varPower(form = ~ logArea))
plot(model)
ggplot(training, aes(y = price, x = area)) + geom_point()
model <- gls(price ~ area, data = training, weights = varPower(form = ~ area))
plot(model)
model <- gls(price ~ area, data = training, weights = varFixed(~ area))
plot(model)
